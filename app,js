const express = require('express');
const bodyParser = require('body-parser');
const app = express();
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');

const SECRET_KEY = 'your_secret_key';

app.use(bodyParser.json());

// Add routes here

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});


// Dummy user data
const users = [
  { id: 1, email: 'user@example.com', passwordHash: 'hashed_password' }
];

// Authenticate user and return JWT token
app.post('/api/authenticate', (req, res) => {
  const { email, password } = req.body;
  const user = users.find(user => user.email === email);

  if (!user || !bcrypt.compareSync(password, user.passwordHash)) {
    return res.status(401).json({ message: 'Invalid credentials' });
  }

  const token = jwt.sign({ userId: user.id }, SECRET_KEY, { expiresIn: '1h' });
  res.json({ token });
});
const posts = [];

// Create a new post
app.post('/api/posts', (req, res) => {
  const { title, description } = req.body;
  const post = { id: posts.length + 1, title, description, createdAt: new Date() };
  posts.push(post);
  res.json(post);
});

// Delete a post by ID
app.delete('/api/posts/:id', (req, res) => {
  const postId = parseInt(req.params.id);
  const index = posts.findIndex(post => post.id === postId);
  if (index !== -1) {
    posts.splice(index, 1);
    res.json({ message: 'Post deleted successfully' });
  } else {
    res.status(404).json({ message: 'Post not found' });
  }
});
